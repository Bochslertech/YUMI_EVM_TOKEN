/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EIP2981AllToken,
  EIP2981AllTokenInterface,
} from "../../../contracts/nft/EIP2981AllToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "perc",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161026538038061026583398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610092565b6000806040838503121561006b57600080fd5b82516001600160a01b038116811461008257600080fd5b6020939093015192949293505050565b6101c4806100a16000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780632a55205a14610063575b600080fd5b61004e61004936600461011d565b6100a2565b60405190151581526020015b60405180910390f35b61007661007136600461014e565b6100d9565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520161005a565b60006001600160e01b0319821663152a902d60e11b14806100d357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008054600154829173ffffffffffffffffffffffffffffffffffffffff169061271090610108908690610170565b6101129190610195565b915091509250929050565b60006020828403121561012f57600080fd5b81356001600160e01b03198116811461014757600080fd5b9392505050565b6000806040838503121561016157600080fd5b50508035926020909101359150565b80820281158282048414176100d357634e487b7160e01b600052601160045260246000fd5b6000826101b257634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000811000a";

type EIP2981AllTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EIP2981AllTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EIP2981AllToken__factory extends ContractFactory {
  constructor(...args: EIP2981AllTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    addr: PromiseOrValue<string>,
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EIP2981AllToken> {
    return super.deploy(
      addr,
      perc,
      overrides || {}
    ) as Promise<EIP2981AllToken>;
  }
  override getDeployTransaction(
    addr: PromiseOrValue<string>,
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(addr, perc, overrides || {});
  }
  override attach(address: string): EIP2981AllToken {
    return super.attach(address) as EIP2981AllToken;
  }
  override connect(signer: Signer): EIP2981AllToken__factory {
    return super.connect(signer) as EIP2981AllToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EIP2981AllTokenInterface {
    return new utils.Interface(_abi) as EIP2981AllTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EIP2981AllToken {
    return new Contract(address, _abi, signerOrProvider) as EIP2981AllToken;
  }
}
